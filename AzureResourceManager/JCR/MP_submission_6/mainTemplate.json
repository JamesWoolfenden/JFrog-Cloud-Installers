{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "outputs": {
    "fqdn": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',variables('pipPrimaryName')),'2018-07-01').dnsSettings.fqdn]"
    }
  },
  "parameters": {
    "DB_Admin_Password": {
      "metadata": {
        "description": "Database Admin password"
      },
      "minLength": 1,
      "type": "securestring"
    },
    "DB_Admin_User": {
      "metadata": {
        "description": "Database Admin user name"
      },
      "minLength": 1,
      "type": "string"
    },
    "DB_Edition": {
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ],
      "defaultValue": "Basic",
      "metadata": {
        "description": "Database Edition"
      },
      "minLength": 1,
      "type": "string"
    },
    "DB_Name": {
      "metadata": {
        "description": "Database name"
      },
      "minLength": 1,
      "type": "string"
    },
    "_artifactsLocation": {
      "defaultValue": "[deployment().properties.templateLink.uri]",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
      },
      "type": "string"
    },
    "_artifactsLocationSasToken": {
      "defaultValue": "",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
      },
      "type": "securestring"
    },
    "adminPassword": {
      "metadata": {
        "description": "Admin password on all VMs. Follow conventions for azure VM admin password rules."
      },
      "type": "securestring"
    },
    "adminUsername": {
      "metadata": {
        "description": "Admin username on all VMs. Follow conventions for azure VM admin user name."
      },
      "type": "string"
    },
    "artifactoryServerName": {
      "defaultValue": "artifactory",
      "metadata": {
        "description": "Provide artifactory server name to be used in Nginx. e.g artifactory for artifactory.jfrog.team"
      },
      "minLength": 1,
      "type": "string"
    },
    "artifactoryVersion": {
      "allowedValues": [
        "6.6.0",
        "6.6.1",
        "6.7.0",
        "6.8.0",
        "0.16.0"
      ],
      "defaultValue": "0.16.0",
      "metadata": {
        "description": "JFrog Container Registry-vm image version to deploy."
      },
      "type": "string"
    },
    "certificate": {
      "metadata": {
        "description": "To use Artifactory as docker registry you need to provide wild card valid Certificate. Provide your SSL Certificate."
      },
      "type": "securestring"
    },
    "certificateDomain": {
      "defaultValue": "artifactory",
      "metadata": {
        "description": "Provide your Certificate Domain Name. For e.g jfrog.team for certificate with *.jfrog.team"
      },
      "minLength": 1,
      "type": "string"
    },
    "certificateKey": {
      "metadata": {
        "description": "Provide your SSL Certificate key"
      },
      "type": "securestring"
    },
    "clusterName": {
      "maxLength": 61,
      "metadata": {
        "description": "String used as a base for naming resources. Must be 3-61 characters in length and globally unique across Azure. A hash is prepended to this string for some resources, and resource-specific information is appended."
      },
      "type": "string"
    },
    "extraJavaOptions": {
      "defaultValue": "-server -Xms2g -Xmx12g -Xss256k -XX:+UseG1GC -XX:OnOutOfMemoryError=\\\"kill -9 %p\\\"",
      "metadata": {
        "description": "Setting Java Memory Parameters for Artifactory. Learn about system requirements for Artifactory https://www.jfrog.com/confluence/display/RTF/System+Requirements#SystemRequirements-RecommendedHardware."
      },
      "minLength": 1,
      "type": "string"
    },
    "location": {
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for the resources."
      },
      "type": "string"
    },
    "masterKey": {
      "maxLength": 64,
      "metadata": {
        "description": "Master key for JFrog Container Registry cluster. Generate master.key using command '$openssl rand -hex 16'"
      },
      "type": "securestring"
    },
    "storageAccountType": {
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS"
      ],
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Storage Account type"
      },
      "type": "string"
    },
    "vmSku": {
      "defaultValue": "Standard_A4",
      "metadata": {
        "description": "Size of VMs in the VM Scale Set."
      },
      "type": "string"
    }
  },
  "resources": [
    {
      "apiVersion": "2019-05-01",
      "name": "pid-04c1c376-5d4b-4771-9a7f-054f5910dcef",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      },
      "type": "Microsoft.Resources/deployments"
    },
    {
      "apiVersion": "2018-07-01",
      "location": "[parameters('location')]",
      "name": "[variables('nsgName')]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh-rule",
            "properties": {
              "access": "Allow",
              "description": "Allow SSH",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22",
              "direction": "Inbound",
              "priority": 100,
              "protocol": "Tcp",
              "sourceAddressPrefix": "Internet",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "http-artifactory-rule",
            "properties": {
              "access": "Allow",
              "description": "Allow HTTP",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "8081",
              "direction": "Inbound",
              "priority": 101,
              "protocol": "Tcp",
              "sourceAddressPrefix": "Internet",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "http-nginx-rule",
            "properties": {
              "access": "Allow",
              "description": "Allow HTTP",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "80",
              "direction": "Inbound",
              "priority": 102,
              "protocol": "Tcp",
              "sourceAddressPrefix": "Internet",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "https-nginx-rule",
            "properties": {
              "access": "Allow",
              "description": "Allow HTTP",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "443",
              "direction": "Inbound",
              "priority": 103,
              "protocol": "Tcp",
              "sourceAddressPrefix": "Internet",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "membership-rule",
            "properties": {
              "access": "Allow",
              "description": "Allow HTTP",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "10001",
              "direction": "Inbound",
              "priority": 105,
              "protocol": "Tcp",
              "sourceAddressPrefix": "Internet",
              "sourcePortRange": "*"
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkSecurityGroups"
    },
    {
      "apiVersion": "2018-07-01",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgName'))]"
      ],
      "location": "[parameters('location')]",
      "name": "[variables('virtualNetworkName')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetPrimaryName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrimaryPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
              }
            }
          },
          {
            "name": "[variables('subnetMemberName')]",
            "properties": {
              "addressPrefix": "[variables('subnetMemberPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/virtualNetworks"
    },
    {
      "apiVersion": "2018-07-01",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('pipPrimaryName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
      ],
      "location": "[parameters('location')]",
      "name": "[variables('nicPrimaryName')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetPrimaryName'))]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
        }
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "2018-07-01",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('pipMemberName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
      ],
      "location": "[parameters('location')]",
      "name": "[variables('nicMemberName')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetMemberName'))]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
        }
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "2018-07-01",
      "location": "[parameters('location')]",
      "name": "[variables('pipPrimaryName')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('namingInfix')]"
        },
        "publicIPAllocationMethod": "Static"
      },
      "sku": {
        "name": "Standard"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "2018-07-01",
      "location": "[parameters('location')]",
      "name": "[variables('pipMemberName')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[concat(variables('namingInfix'),'2')]"
        },
        "publicIPAllocationMethod": "Static"
      },
      "sku": {
        "name": "Standard"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "2018-07-01",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('pipPrimaryName'))]"
      ],
      "location": "[parameters('location')]",
      "name": "[variables('lbName')]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "[variables('bepoolPrimaryName')]"
          },
          {
            "name": "[variables('bepoolMemberName')]"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('feIpConfigPrimaryName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipPrimaryName'))]"
              }
            }
          },
          {
            "name": "[variables('feIpConfigMemberName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipMemberName'))]"
              }
            }
          }
        ],
        "inboundNatPools": [
          {
            "name": "[variables('natPoolPrimaryName')]",
            "properties": {
              "backendPort": 22,
              "frontendIPConfiguration": {
                "id": "[variables('feIpConfigPrimaryId')]"
              },
              "frontendPortRangeEnd": 11022,
              "frontendPortRangeStart": 10022,
              "protocol": "tcp"
            }
          },
          {
            "name": "[variables('natPoolMemberName')]",
            "properties": {
              "backendPort": 22,
              "frontendIPConfiguration": {
                "id": "[variables('feIpConfigMemberId')]"
              },
              "frontendPortRangeEnd": 21022,
              "frontendPortRangeStart": 20022,
              "protocol": "tcp"
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "HTTPRulePrimary",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('bepoolPrimaryID')]"
              },
              "backendPort": 80,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('feIpConfigPrimaryId')]"
              },
              "frontendPort": 80,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('lbName'), variables('httpProbePrimaryName'))]"
              },
              "protocol": "Tcp"
            }
          },
          {
            "name": "HTTPSRulePrimary",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('bepoolPrimaryID')]"
              },
              "backendPort": 443,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('feIpConfigPrimaryId')]"
              },
              "frontendPort": 443,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('lbName'), variables('httpsProbePrimaryName'))]"
              },
              "protocol": "Tcp"
            }
          },
          {
            "name": "HTTPRuleMember",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('bepoolMemberID')]"
              },
              "backendPort": 80,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('feIpConfigMemberId')]"
              },
              "frontendPort": 80,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('lbName'), variables('httpProbeMemberName'))]"
              },
              "protocol": "Tcp"
            }
          },
          {
            "name": "HTTPSRuleMember",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('bepoolMemberID')]"
              },
              "backendPort": 443,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('feIpConfigMemberId')]"
              },
              "frontendPort": 443,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('lbName'), variables('httpsProbeMemberName'))]"
              },
              "protocol": "Tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "[variables('httpProbePrimaryName')]",
            "properties": {
              "intervalInSeconds": 60,
              "numberOfProbes": 5,
              "port": 80,
              "protocol": "Http",
              "requestPath": "/artifactory/api/system/ping"
            }
          },
          {
            "name": "[variables('httpsProbePrimaryName')]",
            "properties": {
              "intervalInSeconds": 60,
              "numberOfProbes": 5,
              "port": 443,
              "protocol": "Tcp"
            }
          },
          {
            "name": "[variables('httpProbeMemberName')]",
            "properties": {
              "intervalInSeconds": 60,
              "numberOfProbes": 5,
              "port": 80,
              "protocol": "Http",
              "requestPath": "/artifactory/api/system/ping"
            }
          },
          {
            "name": "[variables('httpsProbeMemberName')]",
            "properties": {
              "intervalInSeconds": 60,
              "numberOfProbes": 5,
              "port": 443,
              "protocol": "Tcp"
            }
          }
        ]
      },
      "sku": {
        "name": "Standard"
      },
      "tags": {
        "displayName": "Load Balancer"
      },
      "type": "Microsoft.Network/loadBalancers"
    },
    {
      "apiVersion": "2018-07-01",
      "kind": "Storage",
      "location": "[parameters('location')]",
      "name": "[variables('storageAccountName')]",
      "properties": {},
      "sku": {
        "name": "[parameters('storageAccountType')]"
      },
      "tags": {
        "displayName": "Artifactory Storage Account"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "2018-07-01",
      "name": "deploySQLDB",
      "properties": {
        "mode": "Incremental",
        "parameters": {
          "db_edition": {
            "value": "[variables('DB_Edition')]"
          },
          "db_location": {
            "value": "[variables('DB_Location')]"
          },
          "db_name": {
            "value": "[parameters('DB_Name')]"
          },
          "db_password": {
            "value": "[parameters('DB_Admin_Password')]"
          },
          "db_server": {
            "value": "[variables('azureSqlServerName')]"
          },
          "db_user": {
            "value": "[parameters('DB_Admin_User')]"
          }
        },
        "templateLink": {
          "contentVersion": "1.0.0.0",
          "uri": "[variables('dbTemplateLocation')]"
        }
      },
      "type": "Microsoft.Resources/deployments"
    },
    {
      "apiVersion": "2018-10-01",
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Resources/deployments/', 'deploySQLDB')]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
      ],
      "location": "[parameters('location')]",
      "name": "[variables('scaleSetPrimaryName')]",
      "plan": {
        "name": "artifactory-jcr",
        "product": "jfrogcontainerregistry-vm",
        "publisher": "jfrog"
      },
      "properties": {
        "overprovision": "false",
        "singlePlacementGroup": true,
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "extensionProfile": {
            "extensions": [
              {
                "name": "extension1",
                "properties": {
                  "autoUpgradeMinorVersion": false,
                  "protectedSettings": {
                    "commandToExecute": "sh install_artifactory.sh"
                  },
                  "publisher": "Microsoft.Azure.Extensions",
                  "settings": {
                    "fileUris": [
                      "[uri(parameters('_artifactsLocation'), concat('scripts/install_artifactory.sh', parameters('_artifactsLocationSasToken')))]"
                    ]
                  },
                  "type": "CustomScript",
                  "typeHandlerVersion": "2.0"
                }
              }
            ]
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('nicPrimaryName')]",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "[concat(variables('ipConfigName'),'1')]",
                      "properties": {
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('lbName'), variables('bePoolPrimaryName'))]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatPools', variables('lbName'), variables('natPoolPrimaryName'))]"
                          }
                        ],
                        "subnet": {
                          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetPrimaryName'))]"
                        }
                      }
                    }
                  ],
                  "primary": true
                }
              }
            ]
          },
          "osProfile": {
            "adminPassword": "[parameters('adminPassword')]",
            "adminUsername": "[parameters('adminUsername')]",
            "computerNamePrefix": "[variables('namingInfix')]",
            "customData": "[base64(concat('#INSTALL SCRIPT INPUTS\nCERTIFICATE_KEY=',variables('certificateKey'),'\nCERTIFICATE=', variables('certificate'),'\nCERTIFICATE_DOMAIN=',variables('certificateDomain'),'\nARTIFACTORY_SERVER_NAME=',variables('artifactoryServerName'),'\nEXTRA_JAVA_OPTS=',variables('extraJavaOptions'),'\nJDBC_STR=',reference('Microsoft.Resources/deployments/deploySQLDB').outputs.jdbcConnString.value,'\nDB_NAME=',variables('DB_Name'),'\nDB_ADMIN_USER=',variables('DB_Admin_User'),'\nDB_ADMIN_PASSWD=',variables('DB_Admin_Password'),'\nSTO_ACT_NAME=',variables('storageAccountName'),'\nSTO_ACT_ENDPOINT=',reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob,'\nSTO_CTR_NAME=',variables('vmStorageAccountContainerName'),'\nSTO_ACT_KEY=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2018-07-01').keys[0].value,'\nMASTER_KEY=',variables('masterKey'),'\nIS_PRIMARY=','true','\n'))]"
          },
          "storageProfile": {
            "imageReference": "[variables('imageReference')]",
            "osDisk": {
              "caching": "ReadWrite",
              "createOption": "FromImage",
              "diskSizeGB": "250"
            }
          }
        }
      },
      "sku": {
        "capacity": "1",
        "name": "[parameters('vmSku')]",
        "tier": "Standard"
      },
      "type": "Microsoft.Compute/virtualMachineScaleSets"
    }
  ],
  "variables": {
    "DB_Admin_Password": "[parameters('DB_Admin_Password')]",
    "DB_Admin_User": "[parameters('DB_Admin_User')]",
    "DB_Edition": "[parameters('DB_Edition')]",
    "DB_Location": "[parameters('location')]",
    "DB_Name": "[parameters('DB_Name')]",
    "addressPrefix": "10.0.0.0/16",
    "artifactoryServerName": "[parameters('artifactoryServerName')]",
    "azureSqlServerName": "[concat(variables('namingInfix'), 'sqlsrv')]",
    "bepoolMemberID": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('lbName'), variables('bepoolMemberName'))]",
    "bepoolMemberName": "[concat(variables('lbName'), 'memberBepool')]",
    "bepoolPrimaryID": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('lbName'), variables('bepoolPrimaryName'))]",
    "bepoolPrimaryName": "[concat(variables('lbName'), 'primaryBepool')]",
    "certificate": "[parameters('certificate')]",
    "certificateDomain": "[parameters('certificateDomain')]",
    "certificateKey": "[parameters('certificateKey')]",
    "dbTemplate": "azureDBDeploy.json",
    "dbTemplateLocation": "[uri(parameters('_artifactsLocation'), concat('nested/', variables('dbTemplate'), parameters('_artifactsLocationSasToken')))]",
    "extraJavaOptions": "[parameters('extraJavaOptions')]",
    "feIpConfigMemberId": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('lbName'), variables('feIpConfigMemberName'))]",
    "feIpConfigMemberName": "[concat(variables('fepoolMemberName'), 'memberIpConfig')]",
    "feIpConfigPrimaryId": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('lbName'), variables('feIpConfigPrimaryName'))]",
    "feIpConfigPrimaryName": "[concat(variables('fepoolPrimaryName'), 'primaryIpConfig')]",
    "fepoolMemberName": "[concat(variables('lbName'), 'memberFepool')]",
    "fepoolPrimaryName": "[concat(variables('lbName'), 'primaryFepool')]",
    "httpProbeMemberName": "memberHttpProbe",
    "httpProbePrimaryName": "primaryHttpProbe",
    "httpsProbeMemberName": "memberHttpsProbe",
    "httpsProbePrimaryName": "primaryHttpsProbe",
    "imageReference": "[variables('osType')]",
    "ipConfigName": "[concat(variables('namingInfix'), 'ipconfig')]",
    "lbName": "[concat(variables('namingInfix'), 'lb')]",
    "masterKey": "[parameters('masterKey')]",
    "namingInfix": "[toLower(substring(concat(parameters('clusterName'), uniqueString(resourceGroup().id)), 0, 9))]",
    "natPoolMemberName": "[concat(variables('lbName'), 'memberNatpool')]",
    "natPoolPrimaryName": "[concat(variables('lbName'), 'primaryNatpool')]",
    "nicMemberName": "[concat(variables('namingInfix'), 'memberNic')]",
    "nicPrimaryName": "[concat(variables('namingInfix'), 'primaryNic')]",
    "nsgName": "[concat(variables('namingInfix'), 'nsg')]",
    "osType": {
      "offer": "jfrogcontainerregistry-vm",
      "publisher": "jfrog",
      "sku": "artifactory-jcr",
      "version": "[parameters('artifactoryVersion')]"
    },
    "pipMemberName": "[concat(variables('namingInfix'), 'memberPip')]",
    "pipPrimaryName": "[concat(variables('namingInfix'), 'primaryPip')]",
    "scaleSetPrimaryName": "[concat(variables('namingInfix'), 'primaryScaleset')]",
    "storageAccountName": "[concat(variables('namingInfix'), 'storage')]",
    "subnetMemberName": "[concat(variables('namingInfix'), 'memberSubnet')]",
    "subnetMemberPrefix": "10.0.2.0/24",
    "subnetPrimaryName": "[concat(variables('namingInfix'), 'primarySubnet')]",
    "subnetPrimaryPrefix": "10.0.1.0/24",
    "virtualNetworkName": "[concat(variables('namingInfix'), 'vnet')]",
    "vmStorageAccountContainerName": "filestore"
  }
}
