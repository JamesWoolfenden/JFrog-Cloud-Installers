{
  "Description": "This template deploys a VPC, with a pair of public and private subnets spread across two Availability Zones. It deploys an internet gateway, with a default route on the public subnets. It deploys a pair of NAT gateways (one in each AZ), and default routes for them in the private subnets.",
  "Mappings": {
    "RegionToAmazonAMI": {
      "us-east-1": {
        "HVM64": "ami-03e33c1cefd1d3d74"
      },
      "us-east-2": {
        "HVM64": "ami-07d9419c80dc1113c"
      },
      "us-west-1": {
        "HVM64": "ami-0ee1a20d6b0c6a347"
      },
      "us-west-2": {
        "HVM64": "ami-0813245c0939ab3ca"
      }
    }
  },
  "Outputs": {
    "ALBHostName": {
      "Description": "Application Load Balancer Hostname",
      "Value": {
        "Fn::GetAtt": [
          "ApplicationLoadBalancer",
          "DNSName"
        ]
      }
    },
    "BastionInstancePrivate": {
      "Description": "Bastion",
      "Value": {
        "Fn::GetAtt": [
          "BastionInstance",
          "PrivateIp"
        ]
      }
    },
    "BastionInstancePublic": {
      "Description": "Bastion",
      "Value": {
        "Fn::GetAtt": [
          "BastionInstance",
          "PublicIp"
        ]
      }
    },
    "DBInstancePrivate": {
      "Description": "DBInstance",
      "Value": {
        "Fn::GetAtt": [
          "DBInstance",
          "PrivateIp"
        ]
      }
    },
    "RTPriInstancePrivate": {
      "Description": "RTPriInstance",
      "Value": {
        "Fn::GetAtt": [
          "RTPriInstance",
          "PrivateIp"
        ]
      }
    },
    "RTSecInstancePrivate": {
      "Description": "RTSecInstance",
      "Value": {
        "Fn::GetAtt": [
          "RTSecInstance",
          "PrivateIp"
        ]
      }
    },
    "VPC": {
      "Description": "Virtual Private Cloud",
      "Value": {
        "Ref": "VPC"
      }
    },
    "XrayInstancePrivate": {
      "Description": "XrayInstance",
      "Value": {
        "Fn::GetAtt": [
          "XrayInstance",
          "PrivateIp"
        ]
      }
    }
  },
  "Parameters": {
    "EnvironmentName": {
      "Default": "Ansible",
      "Description": "An environment name that is prefixed to resource names",
      "Type": "String"
    },
    "PrivateSubnet1CIDR": {
      "Default": "10.192.20.0/24",
      "Description": "Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone",
      "Type": "String"
    },
    "PrivateSubnet2CIDR": {
      "Default": "10.192.21.0/24",
      "Description": "Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone",
      "Type": "String"
    },
    "PublicSubnet1CIDR": {
      "Default": "10.192.10.0/24",
      "Description": "Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone",
      "Type": "String"
    },
    "PublicSubnet2CIDR": {
      "Default": "10.192.11.0/24",
      "Description": "Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone",
      "Type": "String"
    },
    "SSHKeyName": {
      "Default": "choose-key",
      "Description": "Name of the ec2 key you need one to use this template",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "VpcCIDR": {
      "Default": "10.192.0.0/16",
      "Description": "Please enter the IP range (CIDR notation) for this VPC",
      "Type": "String"
    }
  },
  "Resources": {
    "ALBListener": {
      "Properties": {
        "DefaultActions": [
          {
            "TargetGroupArn": {
              "Ref": "EC2TargetGroup"
            },
            "Type": "forward"
          }
        ],
        "LoadBalancerArn": {
          "Ref": "ApplicationLoadBalancer"
        },
        "Port": 80,
        "Protocol": "HTTP"
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener"
    },
    "ApplicationLoadBalancer": {
      "Properties": {
        "Scheme": "internet-facing",
        "SecurityGroups": [
          {
            "Ref": "ELBSecurityGroup"
          }
        ],
        "Subnets": [
          {
            "Ref": "PublicSubnet1"
          },
          {
            "Ref": "PublicSubnet2"
          }
        ]
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer"
    },
    "BastionInstance": {
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAmazonAMI",
            {
              "Ref": "AWS::Region"
            },
            "HVM64"
          ]
        },
        "InstanceInitiatedShutdownBehavior": "stop",
        "InstanceType": "t2.medium",
        "KeyName": {
          "Ref": "SSHKeyName"
        },
        "Monitoring": "true",
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "EC2SecurityGroup"
              }
            ],
            "SubnetId": {
              "Ref": "PublicSubnet1"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "bastion"
          }
        ],
        "Tenancy": "default"
      },
      "Type": "AWS::EC2::Instance"
    },
    "DBInstance": {
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAmazonAMI",
            {
              "Ref": "AWS::Region"
            },
            "HVM64"
          ]
        },
        "InstanceInitiatedShutdownBehavior": "stop",
        "InstanceType": "t2.medium",
        "KeyName": {
          "Ref": "SSHKeyName"
        },
        "Monitoring": "true",
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "false",
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "EC2SecurityGroup"
              }
            ],
            "SubnetId": {
              "Ref": "PrivateSubnet1"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "database"
          }
        ],
        "Tenancy": "default"
      },
      "Type": "AWS::EC2::Instance"
    },
    "DefaultPrivateRoute1": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NatGateway1"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable1"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "DefaultPrivateRoute2": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NatGateway2"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable2"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "DefaultPublicRoute": {
      "DependsOn": "InternetGatewayAttachment",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "EC2SecurityGroup": {
      "Properties": {
        "GroupDescription": "SSH, Port 80, Database",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 5432,
            "IpProtocol": "tcp",
            "ToPort": 5432
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 8082,
            "IpProtocol": "tcp",
            "ToPort": 8082
          },
          {
            "FromPort": 80,
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "ELBSecurityGroup"
            },
            "ToPort": 80
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "EC2TargetGroup": {
      "Properties": {
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 15,
        "HealthyThresholdCount": 2,
        "Matcher": {
          "HttpCode": "200,302"
        },
        "Name": "EC2TargetGroup",
        "Port": 80,
        "Protocol": "HTTP",
        "Tags": [
          {
            "Key": "Name",
            "Value": "EC2TargetGroup"
          },
          {
            "Key": "Port",
            "Value": 80
          }
        ],
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "20"
          }
        ],
        "Targets": [
          {
            "Id": {
              "Ref": "RTPriInstance"
            }
          },
          {
            "Id": {
              "Ref": "RTSecInstance"
            },
            "Port": 80
          }
        ],
        "UnhealthyThresholdCount": 3,
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup"
    },
    "ELBSecurityGroup": {
      "Properties": {
        "GroupDescription": "SSH and Port 80",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "InternetGateway": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "EnvironmentName"
            }
          }
        ]
      },
      "Type": "AWS::EC2::InternetGateway"
    },
    "InternetGatewayAttachment": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::VPCGatewayAttachment"
    },
    "NatGateway1": {
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "NatGateway1EIP",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }
      },
      "Type": "AWS::EC2::NatGateway"
    },
    "NatGateway1EIP": {
      "DependsOn": "InternetGatewayAttachment",
      "Properties": {
        "Domain": "vpc"
      },
      "Type": "AWS::EC2::EIP"
    },
    "NatGateway2": {
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "NatGateway2EIP",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "PublicSubnet2"
        }
      },
      "Type": "AWS::EC2::NatGateway"
    },
    "NatGateway2EIP": {
      "DependsOn": "InternetGatewayAttachment",
      "Properties": {
        "Domain": "vpc"
      },
      "Type": "AWS::EC2::EIP"
    },
    "PrivateRouteTable1": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} Private Routes (AZ1)"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "PrivateRouteTable2": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} Private Routes (AZ2)"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "PrivateSubnet1": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": {
          "Ref": "PrivateSubnet1CIDR"
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} Private Subnet (AZ1)"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PrivateSubnet1RouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable1"
        },
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PrivateSubnet2": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": {
          "Ref": "PrivateSubnet2CIDR"
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} Private Subnet (AZ2)"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PrivateSubnet2RouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable2"
        },
        "SubnetId": {
          "Ref": "PrivateSubnet2"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PublicRouteTable": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} Public Routes"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "PublicSubnet1": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": {
          "Ref": "PublicSubnet1CIDR"
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} Public Subnet (AZ1)"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PublicSubnet1RouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PublicSubnet2": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": {
          "Ref": "PublicSubnet2CIDR"
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} Public Subnet (AZ2)"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PublicSubnet2RouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet2"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "RTPriInstance": {
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAmazonAMI",
            {
              "Ref": "AWS::Region"
            },
            "HVM64"
          ]
        },
        "InstanceInitiatedShutdownBehavior": "stop",
        "InstanceType": "t2.medium",
        "KeyName": {
          "Ref": "SSHKeyName"
        },
        "Monitoring": "true",
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "false",
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "EC2SecurityGroup"
              }
            ],
            "SubnetId": {
              "Ref": "PrivateSubnet1"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "rtprimary"
          }
        ],
        "Tenancy": "default"
      },
      "Type": "AWS::EC2::Instance"
    },
    "RTSecInstance": {
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAmazonAMI",
            {
              "Ref": "AWS::Region"
            },
            "HVM64"
          ]
        },
        "InstanceInitiatedShutdownBehavior": "stop",
        "InstanceType": "t2.medium",
        "KeyName": {
          "Ref": "SSHKeyName"
        },
        "Monitoring": "true",
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "false",
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "EC2SecurityGroup"
              }
            ],
            "SubnetId": {
              "Ref": "PrivateSubnet2"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "rtsecondary"
          }
        ],
        "Tenancy": "default"
      },
      "Type": "AWS::EC2::Instance"
    },
    "VPC": {
      "Properties": {
        "CidrBlock": {
          "Ref": "VpcCIDR"
        },
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "EnvironmentName"
            }
          }
        ]
      },
      "Type": "AWS::EC2::VPC"
    },
    "XrayInstance": {
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAmazonAMI",
            {
              "Ref": "AWS::Region"
            },
            "HVM64"
          ]
        },
        "InstanceInitiatedShutdownBehavior": "stop",
        "InstanceType": "t2.medium",
        "KeyName": {
          "Ref": "SSHKeyName"
        },
        "Monitoring": "true",
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "false",
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "EC2SecurityGroup"
              }
            ],
            "SubnetId": {
              "Ref": "PrivateSubnet1"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "xray"
          }
        ],
        "Tenancy": "default"
      },
      "Type": "AWS::EC2::Instance"
    }
  }
}
